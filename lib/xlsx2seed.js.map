{"version":3,"sources":["lib/xlsx2seed.js"],"names":["XLSX","require","jsyaml","semver","Xlsx2Seed","file","_book","readFile","sheet_name","config","Xlsx2SeedSheet","book","Sheets","_sheet_names","SheetNames","filter","match","sheet","_sheet_name","_sheet","column_names_row","data_start_row","ignore_columns","version_column","_column_names_row","_data_start_row","_ignore_columns","_version_column","_data","_row_indexes","require_version","_get_data","column_names","column_indexes","column_index","max_column_index","address","utils","encode_cell","c","r","cell","value","format_cell","length","_version_column_index","indexOf","push","_column_names","_column_indexes","column_name","row_index","row_indexes","rows","version_column_index","require_version_range","max_row_index","satisfies","error","Xlsx2SeedVersionError","row","use_value","t","isNaN","Number","v","replace","Xlsx2SeedData","_all_range","decode_range","_max_column_index","all_range","e","_max_row_index","_set_column_info","_rows","records","record","forEach","index","key","id","cut_prefix","cut_postfix","as_key_based","separated_records","toString","cut_id","slice","cut_key","dump","as_separated_key_based","separated_yamls","directory","name","extension","fso","new","writeFile","as_yaml","writeFileSync","as_separated_yaml","dir","exists","then","mkdirp","promises","yaml","Promise","all","mkdirpSync","write_as_yaml","write_as_separated_yaml","write_as_yaml_sync","write_as_separated_yaml_sync","reason","stack","Error","module","exports"],"mappings":"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","file":"xlsx2seed.js","sourcesContent":["const XLSX = require('xlsx');\nconst jsyaml = require('js-yaml');\nconst semver = require('semver');\n\nclass Xlsx2Seed {\n  constructor(file) {\n    this._book = XLSX.readFile(file);\n  }\n\n  get book() {\n    return this._book;\n  }\n\n  get sheet_names() {\n    return this._sheet_names\n      || (this._sheet_names = this.book.SheetNames.filter(\n        (sheet_name) => sheet_name.match(/^[A-Za-z0-9_.]+$/))\n      );\n  }\n\n  sheet(sheet_name, config) {\n    return new Xlsx2SeedSheet(sheet_name, this.book.Sheets[sheet_name], config);\n  }\n}\n\nclass Xlsx2SeedSheet {\n  /**\n   * @param {string} sheet_name\n   * @param {Worksheet} sheet\n   * @param {Object} [config]\n   * @param {number} config.column_names_row\n   * @param {number} config.data_start_row\n   * @param {number} config.ignore_column_names\n   * @param {number} config.version_column\n   */\n  constructor(sheet_name, sheet, config = {}) {\n    this._sheet_name = sheet_name;\n    this._sheet = sheet;\n    const {\n      column_names_row = 1,\n      data_start_row = column_names_row + 1,\n      ignore_columns = [],\n      version_column = null,\n    } = config;\n    this._column_names_row = column_names_row;\n    this._data_start_row = data_start_row;\n    this._ignore_columns = ignore_columns;\n    this._version_column = version_column;\n    this._data = {};\n    this._row_indexes = {};\n  }\n\n  get sheet_name() {\n    return this._sheet_name;\n  }\n\n  get sheet() {\n    return this._sheet;\n  }\n\n  get column_names_row() {\n    return this._column_names_row;\n  }\n\n  get data_start_row() {\n    return this._data_start_row;\n  }\n\n  get ignore_columns() {\n    return this._ignore_columns;\n  }\n\n  get version_column() {\n    return this._version_column;\n  }\n\n  get all_range() {\n    return this._all_range || (this._all_range = XLSX.utils.decode_range(this.sheet['!ref']));\n  }\n\n  get max_column_index() {\n    return this._max_column_index || (this._max_column_index = this.all_range.e.c);\n  }\n\n  get max_row_index() {\n    return this._max_row_index || (this._max_row_index = this.all_range.e.r);\n  }\n\n  get column_names() {\n    if (!this._column_names) this._set_column_info();\n    return this._column_names;\n  }\n\n  get column_indexes() {\n    if (!this._column_indexes) this._set_column_info();\n    return this._column_indexes;\n  }\n\n  get version_column_index() {\n    if (this.version_column && !this._version_column_index) this._set_column_info();\n    return this._version_column_index;\n  }\n\n  row_indexes(require_version = '') {\n    if (!this._row_indexes[require_version]) this._get_data(require_version);\n    return this._row_indexes[require_version];\n  }\n\n  _set_column_info() {\n    const column_names = [];\n    const column_indexes = [];\n    for (let column_index = 0; column_index <= this.max_column_index; ++column_index) {\n      const address = XLSX.utils.encode_cell({c: column_index, r: this.column_names_row});\n      const cell = this.sheet[address];\n      const value = XLSX.utils.format_cell(cell);\n      if (!value.length) break;\n      if (this.version_column && value === this.version_column) {\n        this._version_column_index = column_index;\n      } else if (this.ignore_columns.indexOf(value) === -1) {\n        column_names.push(value);\n        column_indexes.push(column_index);\n      }\n    }\n    this._column_names = column_names;\n    this._column_indexes = column_indexes;\n  }\n\n  has_id_column() {\n    return this.column_names.indexOf('id') !== -1;\n  }\n\n  sheet_column_index(column_name) {\n    return this.column_indexes[this.column_names.indexOf(column_name)];\n  }\n\n  sheet_row_index(row_index, require_version = '') {\n    return this.row_indexes(require_version)[row_index];\n  }\n\n  data(require_version = '') {\n    if (!this._data[require_version]) this._get_data(require_version);\n    return this._data[require_version];\n  }\n\n  _get_data(require_version = '') {\n    const row_indexes = this._row_indexes[require_version] = [];\n    const rows = [];\n    const version_column_index = this.version_column_index;\n    const require_version_range = `<= ${require_version}`;\n    for (let row_index = this.data_start_row; row_index <= this.max_row_index; ++row_index) {\n      if (version_column_index && require_version) { // version check\n        const address = XLSX.utils.encode_cell({c: version_column_index, r: row_index});\n        const cell = this.sheet[address];\n        const value = XLSX.utils.format_cell(cell);\n        try {\n          if (value && !semver.satisfies(value, require_version_range)) {\n            continue;\n          }\n        } catch (error) {\n          throw new Xlsx2SeedVersionError(row_index, version_column_index, error);\n        }\n      }\n      const row = [];\n      rows.push(row);\n      row_indexes.push(row_index);\n      for (const column_index of this.column_indexes) {\n        const address = XLSX.utils.encode_cell({c: column_index, r: row_index});\n        const cell = this.sheet[address];\n        const value = XLSX.utils.format_cell(cell);\n        const use_value =\n          value == null || !value.length ? null : // empty cell -> null\n          cell.t === 'n' && value.match(/E\\+\\d+$/) && !isNaN(value) ? Number(cell.v) : // 1.00+E12 -> use raw value\n          cell.t === 'n' && value.match(/,/) && !isNaN(cell.v) ? Number(cell.v) : // 1,000 -> use raw value\n          isNaN(value) ? value.replace(/\\\\n/g, \"\\n\").replace(/\\r/g, \"\") : // \"\\\\n\" -> \"\\n\" / delete \"\\r\"\n          Number(value);\n        row.push(use_value);\n      }\n    }\n    this._data[require_version] = new Xlsx2SeedData(this.sheet_name, this.column_names, rows);\n  }\n}\n\nclass Xlsx2SeedData {\n  constructor(sheet_name, column_names, rows) {\n    this._sheet_name = sheet_name;\n    this._column_names = column_names;\n    this._rows = rows;\n  }\n\n  get sheet_name() {\n    return this._sheet_name;\n  }\n\n  get column_names() {\n    return this._column_names;\n  }\n\n  get rows() {\n    return this._rows;\n  }\n\n  as_key_based() {\n    const records = {};\n    for (const row of this.rows) {\n      const record = {};\n      row.forEach((value, index) => {\n        const key = this.column_names[index];\n        record[key] = value;\n      });\n      if (record.id) { // skip no id / id = 0\n        records[`data${record.id}`] = record;\n      }\n    }\n    return records;\n  }\n\n  as_separated_key_based(cut_prefix = 0, cut_postfix = 0) {\n    const records = this.as_key_based();\n    const separated_records = {};\n    for (const key in records) {\n      const record = records[key];\n      const id = record.id.toString();\n      const cut_id = id.slice(cut_prefix, id.length - cut_postfix);\n      const cut_key = `data${cut_id}`;\n      if (!separated_records[cut_key]) separated_records[cut_key] = {};\n      separated_records[cut_key][key] = record;\n    }\n    return separated_records;\n  }\n\n  as_yaml() {\n    return jsyaml.dump(this.as_key_based());\n  }\n\n  as_separated_yaml(cut_prefix = 0, cut_postfix = 0) {\n    const separated_records = this.as_separated_key_based(cut_prefix, cut_postfix);\n    const separated_yamls = {};\n    for (const key in separated_records) {\n      const records = separated_records[key];\n      separated_yamls[key] = jsyaml.dump(records);\n    }\n    return separated_yamls;\n  }\n\n  write_as_yaml(directory, name = null, extension = '.yml') {\n    const fso = require('fso');\n    return fso.new(directory).new((name ? name : this.sheet_name) + extension)\n      .writeFile(this.as_yaml());\n  }\n\n  write_as_yaml_sync(directory, name = null, extension = '.yml') {\n    const fso = require('fso');\n    fso.new(directory).new((name ? name : this.sheet_name) + extension)\n      .writeFileSync(this.as_yaml());\n  }\n\n  write_as_separated_yaml(\n    directory, cut_prefix = 0, cut_postfix = 0, name = null, extension = '.yml'\n  ) {\n    const separated_yamls = this.as_separated_yaml(cut_prefix, cut_postfix);\n    const fso = require('fso');\n    const dir = fso.new(directory).new(name ? name : this.sheet_name);\n    return dir.exists().then((exists) => {\n      if (!exists) dir.mkdirp();\n    }).then(() => {\n      const promises = [];\n      for (const key in separated_yamls) {\n        const yaml = separated_yamls[key];\n        promises.push(dir.new(key + extension).writeFile(yaml));\n      }\n      return Promise.all(promises);\n    });\n  }\n\n  write_as_separated_yaml_sync(\n    directory, cut_prefix = 0, cut_postfix = 0, name = null, extension = '.yml'\n  ) {\n    const separated_yamls = this.as_separated_yaml(cut_prefix, cut_postfix);\n    const fso = require('fso');\n    const dir = fso.new(directory).new(name ? name : this.sheet_name);\n    dir.mkdirpSync();\n    for (const key in separated_yamls) {\n      const yaml = separated_yamls[key];\n      dir.new(key + extension).writeFileSync(yaml);\n    }\n  }\n\n  write_as_single_or_separated_yaml(\n    directory, cut_prefix = false, cut_postfix = false, name = null, extension = '.yml'\n  ) {\n    if (cut_prefix === false && cut_postfix === false) {\n      return this.write_as_yaml(directory, name, extension);\n    } else {\n      return this.write_as_separated_yaml(\n        directory, Number(cut_prefix), Number(cut_postfix), name, extension\n      );\n    }\n  }\n\n  write_as_single_or_separated_yaml_sync(\n    directory, cut_prefix = false, cut_postfix = false, name = null, extension = '.yml'\n  ) {\n    if (cut_prefix === false && cut_postfix === false) {\n      this.write_as_yaml_sync(directory, name, extension);\n    } else {\n      this.write_as_separated_yaml_sync(\n        directory, Number(cut_prefix), Number(cut_postfix), name, extension\n      );\n    }\n  }\n}\n\nclass Xlsx2SeedVersionError extends Error {\n  constructor(row_index, column_index, reason) {\n    const address = XLSX.utils.encode_cell({c: column_index, r: row_index});\n    super(`Version Compare Error at ${address} cell.\\nreason:\\n---\\n${reason.stack}---\\n`);\n    this.row_index = row_index;\n    this.column_index = column_index;\n    this.reason = reason;\n    this.address = address;\n  }\n}\n\nmodule.exports = {Xlsx2Seed, Xlsx2SeedSheet, Xlsx2SeedData, Xlsx2SeedVersionError};\n"]}