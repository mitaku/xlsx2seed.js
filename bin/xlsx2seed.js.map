{"version":3,"sources":["bin/xlsx2seed.js"],"names":["fs","require","path","jsyaml","Xlsx2Seed","commander","default_config_file","program","version","arguments","option","value","split","String","on","console","log","parse","process","argv","files","args","length","help","get_config","configContent","load","config","readFileSync","encoding","existsSync","error","toString","exit","versionColumn","version_column","ignoreColumns","ignore_columns","sheet_name_subdivide_rule","sheet_name","result","match","Error","cut_prefix","Number","cut_postfix","ignore_sheets","ignore","map","sheet","subdivide_rules","only_sheets","only","subdivide","_console","stdout","time","timeEnd","output","file","file_path","isAbsolute","join","input","xlsx2seed","sheet_names","has_id_column","data","requireVersion","output_data","as_key_based","dump","write_as_single_or_separated_yaml_sync"],"mappings":"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","file":"xlsx2seed.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst jsyaml = require('js-yaml');\nconst Xlsx2Seed = require('../lib/xlsx2seed').Xlsx2Seed;\nconst commander = require('commander');\n\nconst default_config_file = 'xlsx2seed.yml';\n\nconst program = commander\n  .version(require('../package.json').version)\n  .arguments('<files...>')\n  .option('-S, --subdivide [sheet_name1:2,1:sheet_name2:2,2:sheet_name3,...]', 'subdivide rules', (value) => value.split(','), [])\n  .option('-I, --ignore [sheet_name1,sheet_name2,...]', 'ignore sheet names', (value) => value.split(','), [])\n  .option('-O, --only [sheet_name1,sheet_name2:2,...]', 'only sheet names', (value) => value.split(','), [])\n  .option('-i, --input [path]', 'input directory', String, '.')\n  .option('-o, --output [path]', 'output directory', String, '.')\n  .option('-d, --stdout', 'output one sheets to stdout')\n  .option('-R, --require-version [version]', 'require version (with version column)', String, '')\n  .option('-v, --version-column [column_name]', 'version column', String, '')\n  .option('-n, --ignore-columns [column_name1,column_name2,...]', 'ignore columns', (value) => value.split(','), [])\n  .option('-c, --config [path]', 'config file (default: xlsx2seed.yml)', String, '')\n  .option('-C, --config-content [yaml string]', 'config content', String, '')\n  .on('--help', () => {\n    console.log('  Examples:');\n    console.log('');\n    console.log('    # multiple files');\n    console.log('    $ xlsx2seed -i /path/to/src -o /path/to/dst hoge.xlsx huga.xlsx');\n    console.log('');\n    console.log('    # only foo and bar sheets / bar subdivide postfix 2');\n    console.log('    $ xlsx2seed hoge.xlsx huga.xlsx -O foo,bar:2');\n    console.log('');\n    console.log('    # foo subdivide prefix 1 / bar subdivide postfix 2 / baz subdivide prefix 1 and postfix 2');\n    console.log('    $ xlsx2seed hoge.xlsx huga.xlsx -S 2:foo,bar:2,1:baz:2');\n    console.log('');\n    console.log('    # column names row is 3 (2 in zero origin)');\n    console.log('    $ xlsx2seed hoge.xlsx huga.xlsx -C \"column_names_row: 2\"');\n    console.log('');\n  })\n  .parse(process.argv);\n\nconst files = program.args;\nif (!files.length) program.help();\n\nfunction get_config(program) {\n  try {\n    if (program.configContent) {\n      return jsyaml.load(program.configContent);\n    } else {\n      if (program.config) {\n        return jsyaml.load(fs.readFileSync(program.config, {encoding: 'utf8'}));\n      } else if (fs.existsSync(default_config_file)) {\n        return jsyaml.load(fs.readFileSync(default_config_file, {encoding: 'utf8'}));\n      } else {\n        return {};\n      }\n    }\n  } catch(error) {\n    console.error(\"load config failed!\");\n    console.error(error.toString());\n    process.exit(1);\n  }\n}\nconst config = get_config(program);\nif (program.versionColumn) config.version_column = program.versionColumn;\nif (program.ignoreColumns) config.ignore_columns = program.ignoreColumns;\n\nfunction sheet_name_subdivide_rule(sheet_name) {\n  const result = sheet_name.match(/^(?:(\\d+):)?(.+?)(?::(\\d+))?$/);\n  if (!result) throw new Error(`[${sheet_name}] is wrong sheet name and subdivide rule definition`);\n  return {\n    cut_prefix: result[1] ? Number(result[1]) : false,\n    cut_postfix: result[3] ? Number(result[3]) : false,\n    sheet_name: result[2],\n  };\n}\n\nconst ignore_sheets = {};\nfor (const sheet of program.ignore.map((sheet_name) => sheet_name_subdivide_rule(sheet_name))) {\n  ignore_sheets[sheet.sheet_name] = true;\n}\n\nconst subdivide_rules = {};\n\nconst only_sheets = program.only.length ? {} : null;\nfor (const sheet of program.only.map((sheet_name) => sheet_name_subdivide_rule(sheet_name))) {\n  only_sheets[sheet.sheet_name] = true;\n  subdivide_rules[sheet.sheet_name] = sheet;\n}\n\nfor (const sheet of program.subdivide.map((sheet_name) => sheet_name_subdivide_rule(sheet_name))) {\n  subdivide_rules[sheet.sheet_name] = sheet;\n}\n\nconst _console = {\n  log: function log(...args) {\n    if (!program.stdout) console.log(...args);\n  },\n  time: function log(...args) {\n    if (!program.stdout) console.time(...args);\n  },\n  timeEnd: function log(...args) {\n    if (!program.stdout) console.timeEnd(...args);\n  },\n};\n\n_console.log(`output-directory: ${program.output}`);\n_console.time(`total`);\nfor (const file of files) {\n  const file_path = path.isAbsolute(file) ? file : path.join(program.input, file);\n  _console.log(`${file}:`);\n  _console.log(`  full-path: ${file_path}`);\n  _console.time(`  parsetime`);\n  const xlsx2seed = new Xlsx2Seed(file_path);\n  _console.timeEnd(`  parsetime`);\n\n  _console.log(`  sheets:`);\n  for (const sheet_name of xlsx2seed.sheet_names) {\n    if (only_sheets && !only_sheets[sheet_name]) continue;\n    _console.log(`    ${sheet_name}:`);\n    if (ignore_sheets[sheet_name]) {\n      _console.log(`      ignore: skip`);\n      continue;\n    }\n    const sheet = xlsx2seed.sheet(sheet_name, config);\n    if (!sheet.has_id_column()) {\n      _console.log(`      warning: id column not found -> skip!`);\n      continue;\n    }\n    const {cut_prefix, cut_postfix} = subdivide_rules[sheet_name] || {cut_prefix: false, cut_postfix: false};\n    if (cut_prefix !== false || cut_postfix !== false)\n      _console.log(`      subdivide: {cut_prefix: ${Number(cut_prefix)}, cut_postfix: ${Number(cut_postfix)}}`);\n    _console.time(`      writetime`);\n    const data = sheet.data(program.requireVersion);\n    if (program.stdout) {\n      const output_data = {};\n      output_data[sheet_name] = data.as_key_based();\n      console.log(jsyaml.dump(output_data));\n    } else {\n      data.write_as_single_or_separated_yaml_sync(program.output, cut_prefix, cut_postfix);\n    }\n    _console.timeEnd(`      writetime`);\n  }\n}\n_console.timeEnd(`total`);\n"]}